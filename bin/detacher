#!/usr/bin/env bash

PXCTL='/opt/pwx/bin/pxctl'

printUsage() {
  cat <<EOUSAGE
Usage:
  deacher
    -v <Volume name or ID>
    -c <cluster orchestrator> [k8s|dcos|docker|nomad]
EOUSAGE
  echo "Example: detacher -v mytestvol"
}

genDiags() {
  PXCTL='/opt/pwx/bin/pxctl'
  eval "/opt/pwx/bin/runc exec -t portworx bash -c 'cd /var/cores; gcore `pidof px-storage`'"
  eval "${PXCTL} sv d --all -f"
  echo "[INFO]: Please send along /var/cores/diags.tar.gz and /var/cores/core* to Portworx Support"
}

while getopts "h?:v:c:" opt; do
    case "$opt" in
    h|\?)
        printUsage
        exit 0
        ;;
    v)  VOLUME=$OPTARG
        ;;
    c)  ORCH=$OPTARG
        ;;
    :)
        echo "[ERROR] Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    default)
       printUsage
       exit 1
    esac
done

# Validate Input Args
if [[ (-z ${VOLUME}) || (-z ${ORCH}) ]]; then
    echo "[ERROR]: Required arguments missing"
    printUsage
    exit 1
fi

# Validate orchestrator
if [[ (${ORCH} != 'k8s') && (${ORCH} != 'dcos') && (${ORCH} != 'docker') && (${ORCH} != 'nomad') ]]; then
    echo "[ERROR]: Invalid orchestrator specified. Please check usage for valid options"
    printUsage
    exit 1
fi

# Find out which node this script is running on
MY_IP=`hostname -i`
CLIENT=`${PXCTL} v i ${VOLUME} | grep State | awk '{print $5}' | tr -d '()'`
CLNT_NODE='false'
if [[ (${MY_IP} == ${CLIENT}) ]]; then
    echo "[INFO]: Running on node ${MY_IP}. Volume is currently attached here"
    CLNT_NODE='true'
fi

VOL_HA=`${PXCTL} v i ${VOLUME} | grep HA | awk '{print $3}'`
# Get the current replica set
NUM_NODES=`${PXCTL} v i ${VOLUME} | grep Node | wc -l`
if [[ (${VOL_HA} -ne ${NUM_NODES}) ]]; then
    echo "[ERROR]: Current replca set does not satisfy the configured HA level"
fi

for node in $(${PXCTL} v i ${VOLUME} | grep Node | awk '{print $3}'); do
    if [[ (${MY_IP} == ${node}) ]]; then
        echo "[INFO]: Running on node ${MY_IP}. Volume replica exists on this node."
        # Simply dump diags and exit
        genDiags
    fi
done

if [[ (${CLNT_NODE} == 'false') ]]; then
    # Nothing to do here. Exit
    exit 0
fi

VOLID=`${PXCTL} v i ${VOLUME} | grep Volume | awk '{print $3}'`

# Dump diags
genDiags

# Get the mounts
MOUNTPT=`mount | grep ${VOLUME}`
if [ ! -z ${MOUNTPT} ]; then
    echo "[INFO]: Volume appars mounted"
    echo "${MOUNTPT}"
    #echo "Please Unmount and detach the volume"
    #exit 0
fi

# Check the process holding on to the volume
VOL_IGNORE='/var/lib/osd/mounts'
if [[ (${ORCH} == 'k8s') ]]; then
    VOL_IGNORE='/var/lib/kubelet'
fi

pid=$(find /proc -name mounts | xargs grep ${VOLID} -s | grep -v ${VOL_IGNORE} | grep -v pxmounts | head -n 1 | awk -F'\' '{print $3}')
if [ ! -z ${pid} ]; then
    echo "[INFO]: found ${pid} using the volume ${VOLID}"
    cat /proc/${pid}/cmdline
    if [[ (${ORCH} == 'k8s') ]]; then
        user=$(cat /proc/${pid}/cgroup | head -n 1 | awk -F'/' '{print $4}')
        echo "[INFO]: pod using the volume: ${user}"
    else
        user=$(cat /proc/${pid}/cgroup | head -n 1 | awk -F'/' '{print $3}')
        echo "[INFO]: container using the volume: ${user}"
    fi
    echo "[INFO]: Please stop the container/ pod before detaching the volume"
    exit 0
fi

# If you've gotten here, it means you didn't find any process holding on to the volume
echo "[INFO]: Cannot find any processes holding on to the volume"

# Check inflight
READ_REQ=`cat /sys/block/pxd\!pxd${VOLID}/inflight | awk '{print $1}'`
WRITE_REQ=`cat /sys/block/pxd\!pxd${VOLID}/inflight | awk '{print $2}'`
echo "[INFO]: currently ${READ_REQ} read requests inflight on ${VOLID}"
echo "[INFO]: currently ${WRITE_REQ} write requests inflight on ${VOLID}"

if [[ (${READ_REQ} -ne 0) || (${WRITE_REQ} -ne 0) ]]; then
    echo "[ERROR]: Aborting since there are IOs inflight"
    exit 1
fi

# If you get this far, also try and detach the volume
# @TODO
